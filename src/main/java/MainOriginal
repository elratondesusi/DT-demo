//import abduction.api.implementation.AbducibleContainerImpl;
//import abduction.api.implementation.AbductionManagerAndAbducibleContainerFactoryImpl;
//import abduction.api.implementation.AbductionManagerImpl;
//import abductionapi.exception.CommonException;
//import abductionapi.factory.AbductionManagerAndAbducibleContainerFactory;
//import abductionapi.manager.AbducibleContainer;
//import abductionapi.manager.AbductionManager;
//import algorithms.ISolver;
//import algorithms.hybrid.HybridSolver;
//import org.semanticweb.owlapi.model.OWLOntology;
//import parser.ArgumentParser;
//import common.Configuration;
//import org.apache.log4j.BasicConfigurator;
//import org.apache.log4j.Level;
//import org.apache.log4j.Logger;
//import reasoner.ILoader;
//import reasoner.IReasonerManager;
//import reasoner.Loader;
//import reasoner.ReasonerManager;
//import timer.ThreadTimes;
//
//import java.io.File;
//import java.util.ArrayList;
//import java.util.HashSet;
//import java.util.Set;
//
//
//public class MainOriginal {
//
//    public static void main(String[] args) throws Exception {
//
//        AbductionManagerAndAbducibleContainerFactoryImpl abductionFactory = new AbductionManagerAndAbducibleContainerFactoryImpl();
//        // Abduction API
//        AbductionManagerImpl abductionManager = abductionFactory.createAbductionManager();
//
//        String[] x = new String[1];
////        x[0] = "/home/iveta/Plocha/skola/diplomovka/testingFilesDummyClass/testingFiles/testingFiles0/mhs-mxp/lubm-0_2_3_noNeg.in";
////        x[0] = "/home/iveta/Plocha/skola/diplomovka/MHS-MXP-algorithm/in/input_fam_abd.txt";
//
//        x[0] = "C:/Users/zuz/Documents/UNI/Praca/Mhs-MXP-Algo/testingFiles/testingFiles0/mhs-mxp/lubm-0_2_3_noNeg.in";
//        x[0] = "C:/Users/zuz/Documents/UNI/Praca/Mhs-MXP-Algo/in/input_fam_abd.txt";
//        Logger.getRootLogger().setLevel(Level.OFF);
//        BasicConfigurator.configure();
////        C:/Users/zuz/Documents/UNI/Praca/Mhs-MXP-Algo/testingFiles
//        ArgumentParser argumentParser = new ArgumentParser();
//        //argumentParser.parse(args);
//        argumentParser.parse(x);
//
//        ILoader loader = new Loader();
//        loader.initialize(Configuration.REASONER);
//
//
//        // backgroundKnowledge
////        abductionManager.setBackgroundKnowledge(new File(x[0]));
//        abductionManager.setBackgroundKnowledge(loader.getOriginalOntology());
//        // observation/s
//        abductionManager.setMultipleObservationOnInput(loader.isMultipleObservationOnInput());
//        try {
//            abductionManager.setObservation(loader.getObservation());
//        } catch (CommonException ex) {
//            throw new CommonException("Solver exception: ", ex);
//        }
//
//        AbducibleContainerImpl abducibleContainer = abductionFactory.createAbducibleContainer();;
//        abducibleContainer.allowLoops(Configuration.LOOPING_ALLOWED);
//        abducibleContainer.allowRoleAssertions(Configuration.ROLES_IN_EXPLANATIONS_ALLOWED);
//
//        abducibleContainer.addSymbols(loader.getAbducibles().getClasses());
//        abducibleContainer.addSymbols(loader.getAbducibles().getIndividuals());
//        abducibleContainer.addSymbols(loader.getAbducibles().getRoles());
//
//        abducibleContainer.addAssertions(loader.getAbducibles().getAxioms());
//
//        abductionManager.setAbducibles(abducibleContainer);
//        abductionManager.setAdditionalSolverSettings("");
//
//        ThreadTimes threadTimes = new ThreadTimes(100);
//        threadTimes.start();
//
//        IReasonerManager reasonerManager = new ReasonerManager(loader);
//        ISolver solver = createSolver(threadTimes);
//
//        if (solver != null) {
//            abductionManager.getExplanations(solver, loader, reasonerManager);
//        }
//
//        threadTimes.interrupt();
//    }
//
//    private static ISolver createSolver(ThreadTimes threadTimes) {
//        long currentTimeMillis = System.currentTimeMillis();
//        return new HybridSolver(threadTimes, currentTimeMillis);
//    }
//}
